server:
  port: 80

spring:
  config:
    import: 'aws-secretsmanager:prod/ittaeok/secret'
  autoconfigure:
    exclude:
      - com.google.cloud.spring.autoconfigure.core.GcpContextAutoConfiguration
      - com.google.cloud.spring.autoconfigure.secretmanager.GcpSecretManagerAutoConfiguration
  datasource:
    url: ${db-url}
    username: ${db-username}
    password: ${db-password}
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: update
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        id:
          new_generator_mappings: true
  docker:
    compose:
      lifecycle-management: start-only
  data:
    redis:
      host: ${redis-host}
      port: ${redis-port}
      username: default
      password: ${redis-password}
      ssl:
        enabled: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${google-client-id}
            client-secret: ${google-client-secret}
            redirect-uri: "https://ittaeok.uk/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope:
              - openid
              - email
              - profile
          kakao:
            client-name: kakao
            client-id: ${kakao-client-id}
            client-secret: ${kakao-client-secret}
            redirect-uri: "https://ittaeok.uk/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
springdoc:
  pathsToMatch: /api/**
jwt:
  expiration: 604800000
  refresh-expiration: 704800000
  secret: ${jwt-secret}
front-server:
  domain: https://localhost:3000
google:
  calendar:
    client-id: ${google-client-id}
    client-secret: ${google-client-secret}
    redirect-uri: "https://ittaeok.uk/oauth2/callback/google-calendar"
  api:
    key: ${google-api-key}
zoom:
  client-id: ${zoom-client-id}
  client-secret: ${zoom-client-secret}
  redirect-uri: ${zoom-redirect-uri}
  refresh-token: ${zoom-refresh-token}
kakao:
  middle-location:
    api-key: ${kakao-api-key}
logging:
  level:
    com.grepp.spring.app.model.event.service.EventService: DEBUG
    com.grepp.spring.app.model.event.util.TimeZoneUtils: DEBUG
    com.grepp.spring.app.model.event.dto: DEBUG
    root: info
    org:
      hibernate:
        SQL: info
        type:
          descriptor:
            sql: info
error:
  handling:
    http-status-in-json-response: true
    exception-logging: NO_LOGGING
    full-stacktrace-http-statuses: 5xx
    log-levels:
      5xx: ERROR
    codes:
      UserUserIdValid: USER_USER_ID_VALID
      UserEmailUnique: USER_EMAIL_UNIQUE
      UserPhoneNumberUnique: USER_PHONE_NUMBER_UNIQUE
      SocialAuthTokensAccessTokenUnique: SOCIAL_AUTH_TOKENS_ACCESS_TOKEN_UNIQUE
      SocialAuthTokensRefreshTokenUnique: SOCIAL_AUTH_TOKENS_REFRESH_TOKEN_UNIQUE
      LikeLocationUserUnique: LIKE_LOCATION_USER_UNIQUE
      CalendarUserUnique: CALENDAR_USER_UNIQUE
      DetailScheduleUnique: DETAIL_SCHEDULE_UNIQUE
      CandidateDateDateUnique: CANDIDATE_DATE_DATE_UNIQUE
      MeetingScheduleUnique: MEETING_SCHEDULE_UNIQUE
      LocationMiddleRegionUnique: LOCATION_MIDDLE_REGION_UNIQUE
      LocationCandidateLocationNameUnique: LOCATION_CANDIDATE_LOCATION_NAME_UNIQUE
      UserVoteLocationCandidateUnique: USER_VOTE_LOCATION_CANDIDATE_UNIQUE